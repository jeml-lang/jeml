# Examples for JEML v1.1.0

# ---------------------------------------------------------------------------
# Comments
# ---------------------------------------------------------------------------

# Inline comments use the hash symbol. They can be used inline and will
# only affect what comes after them.

# Multi-line comments use 3 hash symbols, and are active until you close them
# (also with 3 hash symbols).

###
We can put whatever we want in here and it won't be parsed!

int
main(int arc, char** argv)
{
  printf("Hello, World!"); // See, nothing!
  return 0;
}
###

map {
  foo "bar" # and this is an inline comment!
}

# ---------------------------------------------------------------------------
# Maps
# ---------------------------------------------------------------------------

# Maps (otherwise known as hash tables, hash maps, or dictionaries) are how
# JEML handles key/value pairs. We create a map like so:

an_empty_map {}

# Values inside maps are assigned with a key and a value, separated by
# whitespace. JEML doesn't use '=' or ':' to assign values to keys, instead
# keys take the value that comes directly after them.

non_empty_map {
  a_key "a value"
  another_key 3.1415
}

# This also works inline, no change in syntax is needed! JEML knows which
# keys go to which values.

inline_map { inline_key1 "wow inline!" inline_key2 ["a list!"] }

# Maps can also be nested like so:

parent {
  I-belong-to-parent? true
  child {
    I-belong-to-child? true
    child_child {
      I-belong-to-child_child? true
    }
  }
}


# ---------------------------------------------------------------------------
# Lists
# ---------------------------------------------------------------------------

# In JEML, lists are similar to maps. However, list values don't have keys,
# just values. Lists are also heterogeneous, meaning their values can be of
# any type (besides maps). Lists, however, are not standalone like maps.
# They must be assigned to a key and belong in another structure, like a map.

map {
  list [1 2 3 "apple" "banana" "cherry" {foo 1} {bar 2}]
}

# Once again, whitespace is used. However, this time it's used to separate
# values inside the list. Lists can also be nested like maps using the same
# syntax.

nested_lists {
  list_of_empty_lists [ [] [] [] [] [] [] ]
  list_of_partially_filled_lists [ [1] [] [1 2] [3] [] [] ]
}

# ---------------------------------------------------------------------------
# Value Types
# ---------------------------------------------------------------------------

# Booleans
# --------
# Booleans are always lowercase, as it should be!

booleans {
  True? true
  False? false
}

# Strings
# -------
# There are two types of strings in JEML:
#   - Inline
#   - Multi-line
# Both must only use valid UTF-8 characters.

strings {
  inline      "Hello, this is a string"
  escaped     "\tThis string contains \"cool\" escaped characters\n"
  multi-line  """
    Wow, a string on multiple lines!
    Truely astonishing. Welcome to the future.
  """
}

# Multi-line strings are also 1:1 representations, meaning things like this
# work without having to fight against anyone/anything.

string_literals {
  windows_path  """C:\Users\Person\Projects\New Project\"""
  with_quotes   """Your editor's syntax highlighting "loves" this idea"""
  regular_expr  """/[a-zA-Z]{1,}\[a-zA-Z]{1,}/"""
}


# Integers
# --------
# Integers more-than zero are positive, integers less-than zero are negative
# and should be prefixed by a minus '-' character.

integers {
  positive 140
  negative -1
}

# For large numbers, an underscore ('_') character can be used in place of a
# comma.

large_integers {
  pretty_big 1_000
  even_bigger 1_000_000
  super_large 999_999_999 # probably shouldn't be used
}


# Floats
# ------
# Floats are built similarly to integers. However, they may also be suffixed
# by a fractional part (decimal) and/or an exponent part.

floats {
  pi 3.1415927
  const 0.0000000000667
  small -0.0001
  exponents {
    foo -4.116e5
    bar 455E-3
    fiz 3.14e-33
  }
}

# Binary, Octal, and Hexidecimal
# ------------------------------
# JEML also supports Binary, Octal, and Hexidecimal numbers.

complex {
  binary 0b1000101
  octal 0o105
  hexidecimal 0x4f
}

